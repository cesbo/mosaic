package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

type Version struct {
	BuildDate     int64
	VersionDate   string
	VersionCommit string
}

var packageTemplate = template.Must(template.New("").Parse(`// DO NOT EDIT
// Code generated by go generate
package main

var BuildDate = {{printf "%d" .BuildDate}}
var VersionDate = {{printf "%q" .VersionDate}}
var VersionCommit = {{printf "%q" .VersionCommit}}
`))

func getCommit() (string, error) {
	out, err := exec.Command("git", "rev-parse", "--short=8", "HEAD").Output()
	if err != nil {
		return "", fmt.Errorf("ffmpeg stdout pipe: %w", err)
	} else {
		return strings.TrimSuffix(string(out), "\n"), nil
	}
}

func main() {
	commit, err := getCommit()
	if err != nil {
		panic(err)
	}

	now := time.Now()
	version := Version{
		BuildDate:     now.Unix(),
		VersionDate:   now.Format("06.01"),
		VersionCommit: commit,
	}

	out, err := os.Create("version_gen.go")
	if err != nil {
		panic(err)
	}

	packageTemplate.Execute(out, version)
}
