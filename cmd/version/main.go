package main

import (
	"fmt"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

type Version struct {
	BuildDate   string
	BuildCommit string
}

var packageTemplate = template.Must(template.New("").Parse(`// DO NOT EDIT
// Code generated by go generate
package main

var BuildDate = {{printf "%q" .BuildDate}}
var BuildCommit = {{printf "%q" .BuildCommit}}
`))

func getCommit() (string, error) {
	out, err := exec.Command("git", "rev-parse", "--short=8", "HEAD").Output()
	if err != nil {
		return "", fmt.Errorf("ffmpeg stdout pipe: %w", err)
	} else {
		return strings.TrimSuffix(string(out), "\n"), nil
	}
}

func main() {
	commit, err := getCommit()
	if err != nil {
		panic(err)
	}

	version := Version{
		BuildDate:   time.Now().Format("2006-01-02"),
		BuildCommit: commit,
	}

	out, err := os.Create("version_gen.go")
	if err != nil {
		panic(err)
	}

	packageTemplate.Execute(out, version)
}
