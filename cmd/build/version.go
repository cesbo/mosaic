package main

import (
	"bytes"
	"log"
	"os"
	"os/exec"
	"strings"
	"text/template"
	"time"
)

const (
	VERSION_GEN = "internal/help/version_gen.go"
)

type Version struct {
	BuildDate     int64
	VersionDate   string
	VersionCommit string
}

var versionTemplate = template.Must(template.New("").Parse(`
// DO NOT EDIT! DO NOT COMMIT!
// Code generated by cmd/build

package help

const (
	BuildDate uint64 = {{ printf "%d" .BuildDate }}
	VersionDate = {{ printf "%q" .VersionDate }}
	VersionCommit = {{ printf "%q" .VersionCommit }}
)
`))

func updateVersion() {
	args := []string{
		"rev-parse",
		"--short=8",
		"HEAD",
	}

	cmd := exec.Command("git", args...)

	var stdout bytes.Buffer
	var stderr bytes.Buffer

	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	if err := cmd.Run(); err != nil {
		log.Fatalf("get commit info failed:\n\n%s\n\n", stderr.String())
	}

	commit := strings.TrimSuffix(stdout.String(), "\n")

	now := time.Now()
	version := Version{
		BuildDate:     now.Unix(),
		VersionDate:   now.Format("06.01"),
		VersionCommit: commit,
	}

	out, err := os.Create(VERSION_GEN)
	if err != nil {
		log.Fatalf("update version failed:\n\n%s\n\n", err)
	}

	versionTemplate.Execute(out, version)
}
